/*
 * "Small Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It requires a STDOUT  device in your system's hardware.
 *
 * The purpose of this example is to demonstrate the smallest possible Hello
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete
 * description.
 *
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 *
 *    - Set the Optimization Level to -Os
 *
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 *
 *    - Set the Optimization Level to -Os
 *
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION
 *      This removes software exception handling, which means that you cannot
 *      run code compiled for Nios II cpu with a hardware multiplier on a core
 *      without a the multiply unit. Check the Nios II Software Developers
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks
 *      support for buffering, file IO, floating point and getch(), etc.
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */
#include "sys/alt_irq.h"
#include "sys/alt_stdio.h"
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_timer_regs.h"

#include "system.h"

#include "alt_types.h"

static unsigned leds = 0;

int* divideDigits(int number){
	int i;
	int currentDigit;
	int *numberDigits=(int*)malloc(6 * sizeof(int));
	for(i=0;i<6;i++){
		currentDigit=number%10;
		number=number/10;
		numberDigits[i]=currentDigit;

	}
	return numberDigits;
}
int getDigitDisplay(int digit){

	int digits[10]={64,121,36,48,24,18,2,120,0,16};
	return digits[digit];
}
int *numberDisplayDigits(int *digits){
	int *displayDigits=(int*)malloc(6 * sizeof(int));
	int i;
	for(i=0;i<6;i++){
		displayDigits[i]=getDigitDisplay(digits[i]);
	}
	return displayDigits;

}




void writeDisplays(int *digits){
	int* displayDigits=numberDisplayDigits(digits);
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY_0_BASE, displayDigits[0]);
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY_1_BASE, displayDigits[1]);
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY_2_BASE, displayDigits[2]);
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY_3_BASE, displayDigits[3]);
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY_4_BASE, displayDigits[4]);
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY_5_BASE, displayDigits[5]);

}


static void timer_isr(void *context)
{
	(void) context;


	leds = leds << 1 | (IORD_ALTERA_AVALON_PIO_DATA(PIO_SW_INIT_BASE) & 1);
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY_0_BASE, leds);

	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);

}

static void stop_isr(void *context)
{
	(void) context;
	 int data = 177;

	int* digits=divideDigits(data);
	writeDisplays(digits);

	//IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY_0_BASE, data);

}



int main()
{

  alt_ic_isr_register(
		  TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,
		  TIMER_0_IRQ,
		  timer_isr,
		  NULL ,
		  NULL);

  IOWR_ALTERA_AVALON_TIMER_CONTROL(
		  TIMER_0_BASE,
				  ALTERA_AVALON_TIMER_CONTROL_ITO_MSK
				  | ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);


  alt_ic_isr_register(
		  PIO_BUTTON_STOP_IRQ_INTERRUPT_CONTROLLER_ID,
		  PIO_BUTTON_STOP_IRQ,
  		  stop_isr,
  		  NULL ,
  		  NULL);
  IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_BUTTON_STOP_BASE, 0x1);
  while (1);

}
